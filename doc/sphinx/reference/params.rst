
.. The following is the autogenerated output from varnishd -x dumprstparam

accept_filter
	- Units: bool
	- Default: on
	- Flags: must_restart

	Enable kernel accept-filters, if supported by the kernel.

acceptor_sleep_decay
	- Default: 0.900
	- Flags: experimental

	If we run out of resources, such as file descriptors or worker threads, the acceptor will sleep between accepts.
	This parameter (multiplicatively) reduce the sleep duration for each succesfull accept. (ie: 0.9 = reduce by 10%)

acceptor_sleep_incr
	- Units: s
	- Default: 0.001
	- Flags: experimental

	If we run out of resources, such as file descriptors or worker threads, the acceptor will sleep between accepts.
	This parameter control how much longer we sleep, each time we fail to accept a new connection.

acceptor_sleep_max
	- Units: s
	- Default: 0.050
	- Flags: experimental

	If we run out of resources, such as file descriptors or worker threads, the acceptor will sleep between accepts.
	This parameter limits how long it can sleep between attempts to accept new connections.

auto_restart
	- Units: bool
	- Default: on

	Restart child process automatically if it dies.

ban_dups
	- Units: bool
	- Default: on

	Detect and eliminate duplicate bans.

ban_lurker_sleep
	- Units: s
	- Default: 0.01

	How long time does the ban lurker thread sleeps between successful attempts to push the last item up the ban  list.  It always sleeps a second when nothing can be done.
	A value of zero disables the ban lurker.

between_bytes_timeout
	- Units: s
	- Default: 60

	Default timeout between bytes when receiving data from backend. We only wait for this many seconds between bytes before giving up. A value of 0 means it will never time out. VCL can override this default value for each backend request and backend request. This parameter does not apply to pipe.

busyobj_worker_cache
	- Units: bool
	- Default: off

	Cache free busyobj per worker thread.Disable this if you have very high hitrates and wantto save the memory of one busyobj per worker thread.

cc_command
	- Default: exec gcc -std=gnu99 -g -O2 -pthread -fpic -shared -Wl,-x -o %o %s
	- Flags: must_reload

	Command used for compiling the C source code to a dlopen(3) loadable object.  Any occurrence of %s in the string will be replaced with the source file name, and %o will be replaced with the output file name.

cli_buffer
	- Units: bytes
	- Default: 8k

	Size of buffer for CLI command input.
	You may need to increase this if you have big VCL files and use the vcl.inline CLI command.
	NB: Must be specified with -p to have effect.

cli_limit
	- Units: bytes
	- Default: 48k

	Maximum size of CLI response.  If the response exceeds this limit, the reponse code will be 201 instead of 200 and the last line will indicate the truncation.

cli_timeout
	- Units: seconds
	- Default: 10

	Timeout for the childs replies to CLI requests from the mgt_param.

clock_skew
	- Units: s
	- Default: 10

	How much clockskew we are willing to accept between the backend and our own clock.

connect_timeout
	- Units: s
	- Default: 0.7

	Default connection timeout for backend connections. We only try to connect to the backend for this many seconds before giving up. VCL can override this default value for each backend and backend request.

critbit_cooloff
	- Units: s
	- Default: 180.0
	- Flags: wizard

	How long time the critbit hasher keeps deleted objheads on the cooloff list.

debug
	- Default: none

	Enable/Disable various kinds of debugging.
		none		Disable all debugging
	Use +/- prefix to set/reset individual bits::

		req_state	VSL Request state engine
		workspace	VSL Workspace operations
		waiter		VSL Waiter internals
		waitinglist	VSL Waitinglist events
		syncvsl		Make VSL synchronous
		hashedge	Edge cases in Hash
		vclrel		Rapid VCL release
		lurker		VSL Ban lurker

default_grace
	- Units: seconds
	- Default: 10
	- Flags: delayed

	Default grace period.  We will deliver an object this long after it has expired, provided another thread is attempting to get a new copy.
	Objects already cached will not be affected by changes made until they are fetched from the backend again.

default_keep
	- Units: seconds
	- Default: 0
	- Flags: delayed

	Default keep period.  We will keep a useless object around this long, making it available for conditional backend fetches.  That means that the object will be removed from the cache at the end of ttl+grace+keep.

default_ttl
	- Units: seconds
	- Default: 120

	The TTL assigned to objects if neither the backend nor the VCL code assigns one.
	Objects already cached will not be affected by changes made until they are fetched from the backend again.
	To force an immediate effect at the expense of a total flush of the cache use "ban obj.http.date ~ ."

esi_syntax
	- Units: bitmap
	- Default: 0

	Bitmap controlling ESI parsing code::

	  0x00000001 - Don't check if it looks like XML
	  0x00000002 - Ignore non-esi elements
	  0x00000004 - Emit parsing debug records
	  0x00000008 - Force-split parser input (debugging)

	Use 0x notation and do the bitor in your head :-)

expiry_sleep
	- Units: seconds
	- Default: 1

	How long the expiry thread sleeps when there is nothing for it to do.

feature
	- Default: none

	Enable/Disable various minor features.
		none		Disable all features.
	Use +/- prefix to enable/disable individual feature::

		short_panic	Short panic message.
		wait_silo	Wait for persistent silo.
		no_coredump	No coredumps.

fetch_chunksize
	- Units: bytes
	- Default: 128k
	- Flags: experimental

	The default chunksize used by fetcher. This should be bigger than the majority of objects with short TTLs.
	Internal limits in the storage_file module makes increases above 128kb a dubious idea.

fetch_maxchunksize
	- Units: bytes
	- Default: 256m
	- Flags: experimental

	The maximum chunksize we attempt to allocate from storage. Making this too large may cause delays and storage fragmentation.

first_byte_timeout
	- Units: s
	- Default: 60

	Default timeout for receiving first byte from backend. We only wait for this many seconds for the first byte before giving up. A value of 0 means it will never time out. VCL can override this default value for each backend and backend request. This parameter does not apply to pipe.

group
	- Default: nogroup
	- Flags: must_restart

	The unprivileged group to run as.

gzip_buffer
	- Units: bytes
	- Default: 32k
	- Flags: experimental

	Size of malloc buffer used for gzip processing.
	These buffers are used for in-transit data, for instance gunzip'ed data being sent to a client.Making this space to small results in more overhead, writes to sockets etc, making it too big is probably just a waste of memory.

gzip_level
	- Default: 6

	Gzip compression level: 0=debug, 1=fast, 9=best

gzip_memlevel
	- Default: 8

	Gzip memory level 1=slow/least, 9=fast/most compression.
	Memory impact is 1=1k, 2=2k, ... 9=256k.

http_gzip_support
	- Units: bool
	- Default: on
	- Flags: experimental

	Enable gzip support. When enabled Varnish will compress uncompressed objects before they are stored in the cache. If a client does not support gzip encoding Varnish will uncompress compressed objects on demand. Varnish will also rewrite the Accept-Encoding header of clients indicating support for gzip to::

	  Accept-Encoding: gzip

	Clients that do not support gzip will have their Accept-Encoding header removed. For more information on how gzip is implemented please see the chapter on gzip in the Varnish reference.

http_max_hdr
	- Units: header lines
	- Default: 64

	Maximum number of HTTP header lines we allow in {req|resp|bereq|beresp}.http (obj.http is autosized to the exact number of headers).
	Cheap, ~20 bytes, in terms of workspace memory.
	Note that the first line occupies five header lines.

http_range_support
	- Units: bool
	- Default: on

	Enable support for HTTP Range headers.

http_req_hdr_len
	- Units: bytes
	- Default: 8k

	Maximum length of any HTTP client request header we will allow.  The limit is inclusive its continuation lines.

http_req_size
	- Units: bytes
	- Default: 32k

	Maximum number of bytes of HTTP client request we will deal with.  This is a limit on all bytes up to the double blank line which ends the HTTP request.
	The memory for the request is allocated from the client workspace (param: workspace_client) and this parameter limits how much of that the request is allowed to take up.

http_resp_hdr_len
	- Units: bytes
	- Default: 8k

	Maximum length of any HTTP backend response header we will allow.  The limit is inclusive its continuation lines.

http_resp_size
	- Units: bytes
	- Default: 32k

	Maximum number of bytes of HTTP backend resonse we will deal with.  This is a limit on all bytes up to the double blank line which ends the HTTP request.
	The memory for the request is allocated from the worker workspace (param: thread_pool_workspace) and this parameter limits how much of that the request is allowed to take up.

idle_send_timeout
	- Units: seconds
	- Default: 60
	- Flags: delayed

	Time to wait with no data sent. If no data has been transmitted in this many
	seconds the session is closed.
	See setsockopt(2) under SO_SNDTIMEO for more information.

listen_address
	- Default: :80
	- Flags: must_restart

	Whitespace separated list of network endpoints where Varnish will accept requests.
	Possible formats: host, host:port, :port

listen_depth
	- Units: connections
	- Default: 1024
	- Flags: must_restart

	Listen queue depth.

log_local_address
	- Units: bool
	- Default: on

	Log the local address on the TCP connection in the SessionOpen VSL record.
	Disabling this saves a getsockname(2) system call per TCP connection.

lru_interval
	- Units: seconds
	- Default: 2
	- Flags: experimental

	Grace period before object moves on LRU list.
	Objects are only moved to the front of the LRU list if they have not been moved there already inside this timeout period.  This reduces the amount of lock operations necessary for LRU list access.

max_esi_depth
	- Units: levels
	- Default: 5

	Maximum depth of esi:include processing.

max_restarts
	- Units: restarts
	- Default: 4

	Upper limit on how many times a request can restart.
	Be aware that restarts are likely to cause a hit against the backend, so don't increase thoughtlessly.

nuke_limit
	- Units: allocations
	- Default: 50
	- Flags: experimental

	Maximum number of objects we attempt to nuke in orderto make space for a object body.

obj_readonly
	- Units: bool
	- Default: false

	If set, we do not update obj.hits and obj.lastuse to avoid dirtying VM pages associated with cached objects.

pcre_match_limit
	- Default: 10000

	The limit for the  number of internal matching function calls in a pcre_exec() execution.

pcre_match_limit_recursion
	- Default: 10000

	The limit for the  number of internal matching function recursions in a pcre_exec() execution.

ping_interval
	- Units: seconds
	- Default: 3
	- Flags: must_restart

	Interval between pings from parent to child.
	Zero will disable pinging entirely, which makes it possible to attach a debugger to the child.

pipe_timeout
	- Units: seconds
	- Default: 60

	Idle timeout for PIPE sessions. If nothing have been received in either direction for this many seconds, the session is closed.

pool_req
	- Default: 10,100,10

	Parameters for per worker pool request memory pool.
	The three numbers are::

	   min_pool -- minimum size of free pool.
	   max_pool -- maximum size of free pool.
	   max_age -- max age of free element.

pool_sess
	- Default: 10,100,10

	Parameters for per worker pool session memory pool.
	The three numbers are::

	   min_pool -- minimum size of free pool.
	   max_pool -- maximum size of free pool.
	   max_age -- max age of free element.

pool_vbc
	- Default: 10,100,10

	Parameters for backend connection memory pool.
	The three numbers are::

	   min_pool -- minimum size of free pool.
	   max_pool -- maximum size of free pool.
	   max_age -- max age of free element.

pool_vbo
	- Default: 10,100,10

	Parameters for backend object fetch memory pool.
	The three numbers are::

	   min_pool -- minimum size of free pool.
	   max_pool -- maximum size of free pool.
	   max_age -- max age of free element.

prefer_ipv6
	- Units: bool
	- Default: off

	Prefer IPv6 address when connecting to backends which have both IPv4 and IPv6 addresses.

rush_exponent
	- Units: requests per request
	- Default: 3
	- Flags: experimental

	How many parked request we start for each completed request on the object.
	NB: Even with the implict delay of delivery, this parameter controls an exponential increase in number of worker threads.

saintmode_threshold
	- Units: objects
	- Default: 10
	- Flags: experimental

	The maximum number of objects held off by saint mode before no further will be made to the backend until one times out.  A value of 0 disables saintmode.

send_timeout
	- Units: seconds
	- Default: 600
	- Flags: delayed

	Send timeout for client connections. If the HTTP response hasn't been transmitted in this many
	seconds the session is closed.
	See setsockopt(2) under SO_SNDTIMEO for more information.

session_max
	- Units: sessions
	- Default: 100000

	Maximum number of sessions we will allocate from one pool before just dropping connections.
	This is mostly an anti-DoS measure, and setting it plenty high should not hurt, as long as you have the memory for it.

shm_reclen
	- Units: bytes
	- Default: 255

	Maximum number of bytes in SHM log record.
	Maximum is 65535 bytes.

shortlived
	- Units: s
	- Default: 10.0

	Objects created with TTL shorter than this are always put in transient storage.

syslog_cli_traffic
	- Units: bool
	- Default: on

	Log all CLI traffic to syslog(LOG_INFO).

tcp_keepalive_intvl
	- Units: seconds
	- Default: 5
	- Flags: experimental

	The number of seconds between TCP keep-alive probes. Note that this setting will only take effect when it is less thanthe system default.

tcp_keepalive_probes
	- Units: probes
	- Default: 5
	- Flags: experimental

	The maximum number of TCP keep-alive probes to send before giving up and killing the connection if no response is obtained from the other end. Note that this setting will only take effect when it is less than the system default.

tcp_keepalive_time
	- Units: seconds
	- Default: 600
	- Flags: experimental

	The number of seconds a connection needs to be idle before TCP begins sending out keep-alive probes. Note that this setting will only take effect when it is less than the system default.

thread_pool_add_delay
	- Units: seconds
	- Default: 0
	- Flags: experimental

	Wait at least this long after creating a thread.

	Some (buggy) systems may need a short (sub-second) delay between creating threads.
	Set this to a few milliseconds if you see the 'threads_failed' counter grow too much.

	Setting this too high results in insuffient worker threads.

thread_pool_destroy_delay
	- Units: seconds
	- Default: 1
	- Flags: delayed, experimental

	Wait this long after destroying a thread.

	This controls the decay of thread pools when idle(-ish).

	Minimum is 0.01 second.

thread_pool_fail_delay
	- Units: seconds
	- Default: 0.2
	- Flags: experimental

	Wait at least this long after a failed thread creation before trying to create another thread.

	Failure to create a worker thread is often a sign that  the end is near, because the process is running out of some resource.  This delay tries to not rush the end on needlessly.

	If thread creation failures are a problem, check that thread_pool_max is not too high.

	It may also help to increase thread_pool_timeout and thread_pool_min, to reduce the rate at which treads are destroyed and later recreated.

thread_pool_max
	- Units: threads
	- Default: 5000
	- Flags: delayed

	The maximum number of worker threads in each pool.

	Do not set this higher than you have to, since excess worker threads soak up RAM and CPU and generally just get in the way of getting work done.

	Minimum is 10 threads.

thread_pool_min
	- Units: threads
	- Default: 100
	- Flags: delayed

	The minimum number of worker threads in each pool.

	Increasing this may help ramp up faster from low load situations or when threads have expired.

	Minimum is 10 threads.

thread_pool_stack
	- Units: bytes
	- Default: 48k
	- Flags: experimental

	Worker thread stack size.
	This is likely rounded up to a multiple of 4k by the kernel.
	The kernel/OS has a lower limit which will be enforced.

thread_pool_timeout
	- Units: seconds
	- Default: 300
	- Flags: delayed, experimental

	Thread idle threshold.

	Threads in excess of thread_pool_min, which have been idle for at least this long, will be destroyed.

	Minimum is 10 seconds.

thread_pools
	- Units: pools
	- Default: 2
	- Flags: delayed, experimental

	Number of worker thread pools.

	Increasing number of worker pools decreases lock contention.

	Too many pools waste CPU and RAM resources, and more than one pool for each CPU is probably detrimal to performance.

	Can be increased on the fly, but decreases require a restart to take effect.

thread_queue_limit
	- Default: 20
	- Flags: experimental

	Permitted queue length per thread-pool.

	This sets the number of requests we will queue, waiting for an available thread.  Above this limit sessions will be dropped instead of queued.

thread_stats_rate
	- Units: requests
	- Default: 10
	- Flags: experimental

	Worker threads accumulate statistics, and dump these into the global stats counters if the lock is free when they finish a request.
	This parameters defines the maximum number of requests a worker thread may handle, before it is forced to dump its accumulated stats into the global counters.

timeout_idle
	- Units: seconds
	- Default: 5

	Idle timeout for client connections.
	A connection is considered idle, until we receive a non-white-space character on it.

timeout_linger
	- Units: seconds
	- Default: 0.050
	- Flags: experimental

	How long time the workerthread lingers on an idle session before handing it over to the waiter.
	When sessions are reused, as much as half of all reuses happen within the first 100 msec of the previous request completing.
	Setting this too high results in worker threads not doing anything for their keep, setting it too low just means that more sessions take a detour around the waiter.

timeout_req
	- Units: seconds
	- Default: 2

	Max time to receive clients request header, measured from first non-white-space character to double CRNL.

user
	- Default: nobody
	- Flags: must_restart

	The unprivileged user to run as.

vcc_allow_inline_c
	- Units: bool
	- Default: on

	Allow inline C code in VCL.

vcc_err_unref
	- Units: bool
	- Default: on

	Unreferenced VCL objects result in error.

vcc_unsafe_path
	- Units: bool
	- Default: on

	Allow '/' in vmod & include paths.
	Allow 'import ... from ...'.

vcl_dir
	- Default: /tmp/z/v/etc/varnish

	Directory from which relative VCL filenames (vcl.load and include) are opened.

vmod_dir
	- Default: /tmp/z/v/lib/varnish/vmods

	Directory where VCL modules are to be found.

vsl_buffer
	- Units: bytes
	- Default: 4k

	Bytes of (req-/backend-)workspace dedicated to buffering VSL records.
	At a bare minimum, this must be longer than the longest HTTP header to be logged.
	Setting this too high costs memory, setting it too low will cause more VSL flushes and likely increase lock-contention on the VSL mutex.
	Minimum is 1k bytes.

vsl_mask
	- Default: default

	Mask individual VSL messages from being logged.
		default	Set default value
	Use +/- prefixe in front of VSL tag name, to mask/unmask individual VSL messages.

vsl_space
	- Units: bytes
	- Default: 80M
	- Flags: must_restart

	The amount of space to allocate for the VSL fifo buffer in the VSM memory segment.  If you make this too small, varnish{ncsa|log} etc will not be able to keep up.  Making it too large just costs memory resources.

vsm_space
	- Units: bytes
	- Default: 1M
	- Flags: must_restart

	The amount of space to allocate for stats counters in the VSM memory segment.  If you make this too small, some counters will be invisible.  Making it too large just costs memory resources.

waiter
	- Default: platform dependent
	- Flags: must_restart, wizard

	Select the waiter kernel interface.

workspace_backend
	- Units: bytes
	- Default: 64k
	- Flags: delayed

	Bytes of HTTP protocol workspace for backend HTTP req/resp.  If larger than 4k, use a multiple of 4k for VM efficiency.

workspace_client
	- Units: bytes
	- Default: 64k
	- Flags: delayed

	Bytes of HTTP protocol workspace for clients HTTP req/resp.  If larger than 4k, use a multiple of 4k for VM efficiency.

workspace_thread
	- Units: bytes
	- Default: 2048
	- Flags: delayed

	Bytes of auxillary workspace per thread.
	This workspace is used for certain temporary data structures during the operation of a worker thread.
	One use is for the io-vectors for writing requests and responses to sockets, having too little space will result in more writev(2) system calls, having too much just wastes the space.

